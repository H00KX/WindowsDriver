#pragma once
#include "Driver.h"

/***********全局new操作符********************************************/
void * __cdecl operator new(size_t size, POOL_TYPE PoolType = PagedPool)
{
	KdPrint(("global operator new\n"));
	KdPrint(("Allocate size:%d\n", size));
	return ExAllocatePool(PoolType, size);
}
//全局delete操作符
void __cdecl operator delete(void* pointer)
{
	KdPrint(("Global delete operator\n"));
	ExFreePool(pointer);
}

void __cdecl operator delete(void* pointer,unsigned int n)
{
	KdPrint(("Global delete operator%d\n",n));
	ExFreePool(pointer);
	
}

void __cdecl operator delete[](void* pointer)
{
	KdPrint(("Global delete operator----\n"));
	ExFreePool(pointer);
}

class TestClass
{
public:
	//构造函数
	TestClass()
	{
		KdPrint(("TestClass::TestClass()\n"));
	}
	~TestClass()
	{
		KdPrint(("TestClass::~TestClass()\n"));
	}

	//类中的new操作符
	void* operator new(size_t size, POOL_TYPE PoolType = PagedPool)
	{
		KdPrint(("TestClass::new\n"));
		KdPrint(("Allocate size :%d\n"));
		return ExAllocatePool(PoolType, size);
	}
	void operator delete(void* pointer)
	{
		KdPrint(("TestClass::delete\n"));
		ExFreePool(pointer);
	}
private:
	char buffer[1024];

};


void TestNewOperator()
{
	TestClass* pTestClass = new TestClass;
	delete pTestClass;

	pTestClass = new(NonPagedPool)TestClass;
	delete pTestClass;

	char *pBuffer = new(PagedPool) char[100];
	delete []pBuffer;

	pBuffer = new(NonPagedPool) char[100];
	delete []pBuffer;
}


extern "C" NTSTATUS DriverEntry(
	IN PDRIVER_OBJECT pDriverObject,
	IN PUNICODE_STRING pRegistryPath
)
{
	NTSTATUS status;
	KdPrint(("Enter DriverEntry\n"));

	//注册其他驱动调用函数入口
	pDriverObject->DriverUnload = HelloDDKUnload;
	pDriverObject->MajorFunction[IRP_MJ_CREATE] = HelloDDKDispatchRoutine;
	pDriverObject->MajorFunction[IRP_MJ_CLOSE] = HelloDDKDispatchRoutine;
	pDriverObject->MajorFunction[IRP_MJ_WRITE] = HelloDDKDispatchRoutine;
	pDriverObject->MajorFunction[IRP_MJ_READ] = HelloDDKDispatchRoutine;

	//创建驱动设备对象
	status = CreateDevice(pDriverObject);

	TestNewOperator();

	KdPrint(("DriverEntry end\n"));
	return status;
}

/****************************
函数名称：CreateDevice
功能描述：初始化设备对象
* 参数列表：
pDriverObject: 从I/O管理器中传进来的驱动对象
* 返回值：返回初始化状态
*****************************/

NTSTATUS CreateDevice(
	IN PDRIVER_OBJECT pDriverObject
)
{
	NTSTATUS status;
	PDEVICE_OBJECT pDevObj;
	PDEVICE_EXTENSION pDevExt;

	//创建设备名称
	UNICODE_STRING devName;

	RtlInitUnicodeString(&devName, L"\\Device\\MyDDKDevice");

	//创建设备
	status = IoCreateDevice(
		pDriverObject,
		sizeof(DEVICE_EXTENSION),
		&devName,
		FILE_DEVICE_UNKNOWN,
		0,
		TRUE,
		&pDevObj);
	if (!NT_SUCCESS(status))
		return status;

	pDevObj->Flags |= DO_BUFFERED_IO;
	pDevExt = (PDEVICE_EXTENSION)pDevObj->DeviceExtension;
	pDevExt->pDevice = pDevObj;
	pDevExt->ustrDeviceName = devName;
	//创建符号链接
	UNICODE_STRING symLinkName;

	RtlInitUnicodeString(&symLinkName, L"\\??\\HelloDDK");
	pDevExt->ustrSymLinkName = symLinkName;
	status = IoCreateSymbolicLink(&symLinkName, &devName);
	if (!NT_SUCCESS(status))
	{
		IoDeleteDevice(pDevObj);
		return status;
	}
	return STATUS_SUCCESS;
}

/*********************
* 函数名称：HelloDDKUnload
* 功能描述：负责驱动程序的卸载操作
* 参数列表：
*	pDriverObject: 驱动对象
*
* 返回值：返回状态
*****************************************************************/

VOID HelloDDKUnload(IN PDRIVER_OBJECT pDriverObject)
{
	PDEVICE_OBJECT pNextObj;
	KdPrint(("Enter DriverUnload\n"));
	pNextObj = pDriverObject->DeviceObject;
	while (pNextObj != NULL)                         //遍历设备对象，并删除
	{
		PDEVICE_EXTENSION pDevExt = (PDEVICE_EXTENSION)pNextObj->DeviceExtension;

		//删除符号链接
		UNICODE_STRING pLinkName = pDevExt->ustrSymLinkName;
		IoDeleteSymbolicLink(&pLinkName);
		pNextObj = pNextObj->NextDevice;
		IoDeleteDevice(pDevExt->pDevice);
	}
}

/**************
* 函数名称：HelloDDKDispatchRoutine
* 功能描述：对读IRP进行处理
* 参数列表：
*	pDevObj: 功能设备对象
*   pIrp：从I/O请求包
*返回值：返回状态
**************************/

NTSTATUS HelloDDKDispatchRoutine(IN PDEVICE_OBJECT pDevObj,
	IN PIRP pIrp)
{
	KdPrint(("Enter HelloDDKDispatchRoutine\n"));
	NTSTATUS status = STATUS_SUCCESS;
	//完成IRP
	pIrp->IoStatus.Status = status;
	pIrp->IoStatus.Information = 0;

	IoCompleteRequest(pIrp, IO_NO_INCREMENT);
	KdPrint(("Leave HelloDDKDispatchRoutine\n"));
	return status;
}
